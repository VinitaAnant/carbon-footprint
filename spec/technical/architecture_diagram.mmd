```mermaid
graph TD
    subgraph Client-Side (Mobile Application)
        A[User Interface] --> B(Input Forms: Transportation, Energy, Diet, Waste)
        A --> C(Visual Dashboards: Footprint Breakdown, Progress)
        A --> D(Goal Setting & Tracking)
        A --> E(Recommendations & Tips Display)
        A --> F(Educational Content Display)
        A --> G(Settings & Profile Management)
        A --> H(Notifications & Reminders)
        A --> I(Data Export/Sharing Interface)
    end

    subgraph Backend Services
        J[API Gateway] --> K(Authentication & Authorization Service)
        J --> L(User Management Service)
        J --> M(Footprint Calculation Service)
        J --> N(Data Storage Service)
        J --> O(Recommendation Engine)
        J --> P(Notification Service)
        J --> Q(Content Management Service)
        J --> R(Data Export Service)
    end

    subgraph Data Layer
        S[User Database]
        T[Footprint Data Database]
        U[Configuration & Reference Data]
        V[Recommendation & Tip Database]
        W[Educational Content Database]
        X[Exported Data Storage]
    end

    subgraph External Integrations
        Y(Push Notification Provider)
        Z(Cloud Storage for Exports)
        AA(Third-Party Carbon Emission Factors API - Optional)
    end

    B -.-> J
    C -.-> J
    D -.-> J
    E -.-> J
    F -.-> J
    G -.-> J
    H -.-> J
    I -.-> J

    K <--> S
    L <--> S
    M <--> T
    M <--> U
    M --> AA (Optional)
    N <--> T
    N <--> S
    N <--> U
    N <--> V
    N <--> W
    O <--> V
    O <--> T
    P --> Y
    Q <--> W
    R <--> T
    R --> Z

    J --- K
    J --- L
    J --- M
    J --- N
    J --- O
    J --- P
    J --- Q
    J --- R
```

---

# Detailed Specification Document: Personal Carbon Footprint Tracker

## 1. Introduction

This document provides a detailed technical specification for the Personal Carbon Footprint Tracker mobile application. It expands upon the provided PRD by outlining the system architecture, core functionalities, data models, and technical considerations required for development. The goal is to create an intuitive and impactful tool that empowers individuals to understand, reduce, and track their personal carbon footprint.

## 2. System Architecture

The application will follow a client-server architecture. The mobile application (client) will interact with a set of backend services via a RESTful API. Data will be persisted in a database layer. External services will be integrated for functionalities like push notifications and potentially third-party emission factor data.

### 2.1. System Architecture Diagram (Mermaid)

(Refer to the Mermaid diagram above)

### 2.2. Architectural Components

#### 2.2.1. Client-Side (Mobile Application)

*   **User Interface (UI):** Android and/or iOS native applications providing an intuitive and responsive user experience. Developed using modern mobile development frameworks (e.g., React Native, Flutter, Swift/Kotlin).
*   **Input Forms:** Dedicated screens and forms for users to input data related to transportation (e.g., flight distance, vehicle type, mileage), energy consumption (e.g., electricity usage, home size), diet (e.g., meat consumption frequency), and waste (e.g., waste volume, recycling habits).
*   **Visual Dashboards:** Interactive and visually appealing displays of the user's carbon footprint. This includes category breakdowns (e.g., pie charts), historical trends (e.g., line graphs), and progress towards goals.
*   **Goal Setting & Tracking:** Interface for users to define their carbon reduction goals (e.g., "reduce footprint by 10% in 3 months") and visualize their progress against these goals.
*   **Recommendations & Tips Display:** Screens to show personalized sustainability tips and actionable recommendations generated by the backend.
*   **Educational Content Display:** In-app browser or native views to present curated articles, infographics, and videos explaining carbon emissions and sustainable living.
*   **Settings & Profile Management:** User profile creation, editing personal details, password management, notification preferences.
*   **Notifications & Reminders:** Mechanisms to receive and display push notifications and in-app reminders.
*   **Data Export/Sharing Interface:** Options for users to export their data (e.g., CSV, PDF) or share aspects of their progress on social media (optional, low priority for MVP).

#### 2.2.2. Backend Services

*   **API Gateway:** A single entry point for all client requests, handling routing, basic authentication checks, and rate limiting.
*   **Authentication & Authorization Service:** Manages user registration, login (email/password, social login optional), token generation, and ensures users only access their own data.
*   **User Management Service:** Handles user profile operations (create, read, update, delete), managing user preferences, and settings.
*   **Footprint Calculation Service:** The core logic engine responsible for calculating carbon emissions based on user input and predefined emission factors. This service will integrate data from `Configuration & Reference Data` and potentially `Third-Party Carbon Emission Factors API`.
*   **Data Storage Service:** Manages all interactions with the underlying databases, abstracting away specific database technologies. Handles CRUD operations for all data types.
*   **Recommendation Engine:** Analyzes user's carbon footprint data and habits to generate personalized, actionable sustainability tips. Logic could be rule-based initially and grow to ML-driven.
*   **Notification Service:** Manages scheduling and sending push notifications and in-app reminders to users, integrating with external push notification providers.
*   **Content Management Service:** Manages the educational resources and general sustainability tips, allowing for dynamic updates without app redeployment.
*   **Data Export Service:** Processes requests to generate data exports in specified formats (e.g., CSV, PDF) and securely stores them temporarily for user download, or integrates with cloud storage.

#### 2.2.3. Data Layer

*   **User Database (e.g., PostgreSQL, MongoDB):** Stores user profiles, authentication credentials (hashed), settings, and preferences.
    *   **User Table:** `user_id (PK), email (unique), password_hash, salt, first_name, last_name, created_at, updated_at, last_login_at, notification_preferences`
*   **Footprint Data Database (e.g., PostgreSQL, NoSQL for flexibility):** Stores all user-submitted data for carbon footprint calculation and historical tracking.
    *   **Transportation Entries:** `entry_id (PK), user_id (FK), type (flight, car, public_transport), details (e.g., distance, vehicle_type), date, emissions_calculated`
    *   **Energy Entries:** `entry_id (PK), user_id (FK), type (electricity, heating), usage_unit, usage_value, date, emissions_calculated`
    *   **Diet Entries:** `entry_id (PK), user_id (FK), type (vegan, vegetarian, meat_daily, meat_weekly), date, emissions_calculated`
    *   **Waste Entries:** `entry_id (PK), user_id (FK), waste_volume, recycled_volume, date, emissions_calculated`
    *   **Footprint Aggregates:** `footprint_id (PK), user_id (FK), total_emissions, period (daily, weekly, monthly), date_start, date_end, breakdown_json`
    *   **Goals:** `goal_id (PK), user_id (FK), target_reduction_percent, start_date, end_date, current_progress_percent, status`
*   **Configuration & Reference Data (e.g., PostgreSQL, YAML files):** Stores emission factors for various activities, units conversions, default values. This data can be updated centrally.
    *   **Emission Factors Table:** `factor_id (PK), activity_type (e.g., 'car_gasoline', 'electricity_grid'), unit (e.g., 'km', 'kWh'), co2e_per_unit, source`
    *   **Units & Conversions Table:** `unit_id (PK), unit_name, conversion_rate_to_base_unit`
*   **Recommendation & Tip Database (e.g., JSON documents, PostgreSQL):** Stores structured data for sustainability tips, categories, and potential impact.
    *   **Tips Table:** `tip_id (PK), category, title, description, estimated_impact, keywords`
*   **Educational Content Database (e.g., JSON documents, PostgreSQL):** Stores articles, links, and other educational materials.
    *   **Content Table:** `content_id (PK), title, type (article, video, link), content_body_or_url, tags`
*   **Exported Data Storage (e.g., Cloud Storage like AWS S3, Google Cloud Storage):** Temporary or long-term storage for user-generated data exports.

#### 2.2.4. External Integrations

*   **Push Notification Provider (e.g., Firebase Cloud Messaging, Apple Push Notification Service):** For sending real-time notifications and reminders to mobile devices.
*   **Cloud Storage for Exports (e.g., AWS S3, Google Cloud Storage, Azure Blob Storage):** For secure and scalable storage of exported user data files.
*   **Third-Party Carbon Emission Factors API (Optional):** To augment or dynamically update internal emission factor data, providing more accurate and up-to-date calculations. This would be considered for future enhancement.

## 3. Core Functionalities & Technical Details

### 3.1. User Authentication & Profile Management

*   **Registration:** Email and password, with validation (email format, password strength). Confirmation email (optional).
*   **Login:** Email and password. JWT-based authentication for API access.
*   **Password Management:** Forgot password (email-based reset) and change password functionality.
*   **Profile Editing:** Users can update their basic personal information and notification preferences.

### 3.2. Carbon Footprint Calculators

*   **Input Mechanisms:**
    *   **Transportation:**
        *   Flights: Origin, Destination (or distance), class. Lookup emission factors per passenger-kilometer.
        *   Driving: Vehicle type (e.g., Gasoline SUV, Electric Car), distance driven. Lookup emission factors per vehicle-kilometer.
        *   Public Transport: Type (bus, train), distance. Lookup average emission factors.
    *   **Energy Consumption:**
        *   Home Electricity: Monthly/annual kWh usage. Emission factor based on grid mix for user's region (default or user-specified).
        *   Heating: Fuel type (gas, oil, electric), usage.
    *   **Diet:** Simple categorization (e.g., Vegan, Vegetarian, Meat-Eater, Heavy Meat-Eater) or more granular options (e.g., servings of red meat per week). Use average emission factors per diet type or food item per serving.
    *   **Waste:** Approximate weekly/monthly waste volume or weight, recycling habits. Use average emission factors for landfill vs. recycling per unit.
*   **Calculation Logic:**
    *   The `Footprint Calculation Service` will receive user inputs, retrieve relevant emission factors from `Configuration & Reference Data` (and potentially `Third-Party Carbon Emission Factors API`), and compute CO2e (carbon dioxide equivalent) for each activity.
    *   All calculations should be performed server-side to ensure consistency and accuracy.
    *   Units conversion handled gracefully (e.g., miles to km, pounds to kg).
*   **Data Storage:** Raw input data and calculated emissions stored in `Footprint Data Database`.

### 3.3. Personalized Footprint Breakdown

*   **Data Retrieval:** The mobile app requests aggregated footprint data from the `Footprint Calculation Service` via the `API Gateway`.
*   **Aggregation:** Backend aggregates daily/weekly/monthly entries by category (transport, energy, diet, waste) and calculates total CO2e.
*   **Visualization:** Frontend renders interactive charts (e.g., pie charts for breakdown, bar charts for historical comparison) to display the data.
*   **Drill-down:** Users can tap on categories to see more granular details (e.g., specific flights, car journeys).

### 3.4. Goal Setting & Progress Tracking

*   **Goal Definition:** Users can set quantitative goals (e.g., "reduce total footprint by X% by Y date") or qualitative goals (e.g., "adopt a vegetarian diet").
*   **Progress Calculation:** The `Footprint Calculation Service` monitors the user's current footprint against their baseline (when the goal was set) and the target.
*   **Visualization:** Progress bars or line graphs showing historical footprint and target line.
*   **Reminders:** `Notification Service` can send reminders about goal progress.

### 3.5. Actionable Sustainability Tips

*   **Recommendation Engine Logic:**
    *   **Rule-based (MVP):** Simple rules based on high-impact categories (e.g., if transportation is the highest contributor, suggest reducing car usage or flying less).
    *   **Data-driven (Future):** Analyze user's historical data, compare with aggregated user data (anonymized), and suggest tips most likely to have an impact.
*   **Tip Retrieval:** Mobile app fetches relevant tips from the `Recommendation Engine` via the `API Gateway`.
*   **Display:** Tips are presented clearly with estimated impact (if available) and actionable steps.

### 3.6. Educational Resources

*   **Content Management:** `Content Management Service` allows administrators to add, edit, and organize educational articles, videos, and links.
*   **Categorization/Tagging:** Content can be tagged for easy search and filtering by users.
*   **Display:** In-app browser or integrated views for static content.

### 3.7. Data Export/Sharing (Optional)

*   **Initiation:** User requests data export within the app.
*   **Processing:** `Data Export Service` retrieves all relevant user footprint data from `Footprint Data Database`, formats it (e.g., CSV, PDF), and uploads it to `Exported Data Storage`.
*   **Notification:** User is notified (via push notification or in-app message) when their export is ready for download.
*   **Sharing (Frontend):** Mobile app leverages native sharing capabilities to allow users to share snapshots or PDF reports to social media or email.

### 3.8. Reminders & Nudges

*   **Scheduling:** Users can set custom reminders (e.g., "remind me to log data every Sunday").
*   **Automated Nudges:** `Notification Service` can send automated nudges (e.g., "You haven't logged data in 3 days," "You're X% towards your goal!").
*   **Delivery:** Via `Push Notification Provider` to the mobile device.

## 4. Non-Functional Requirements

*   **Performance:**
    *   API response times: <500ms for critical operations (e.g., loading dashboards, saving data).
    *   Mobile app responsiveness: Smooth animations, fast transitions, minimal loading spinners.
*   **Scalability:**
    *   Backend services should be stateless where possible and deployable in a containerized environment (e.g., Docker, Kubernetes) to handle increased user load.
    *   Database should be chosen with scalability in mind (e.g., cloud-managed services).
*   **Security:**
    *   All communications via HTTPS/SSL.
    *   Data at rest encryption.
    *   Authentication via JWTs, secure password hashing (BCrypt, Argon2).
    *   Role-based access control (if admin features are introduced later).
    *   Protection against common web vulnerabilities (SQL injection, XSS, etc.).
*   **Reliability & Availability:**
    *   High availability for backend services (e.g., redundant deployments).
    *   Regular backups of all data.
    *   Error logging and monitoring.
*   **Maintainability:**
    *   Modular codebase with clear separation of concerns.
    *   Comprehensive documentation (API docs, code comments).
    *   Automated tests (unit, integration).
*   **Usability:**
    *   Intuitive and easy-to-navigate user interface.
    *   Clear feedback on user actions.
    *   Accessibility considerations for diverse users.

## 5. Technology Stack (Proposed)

*   **Mobile Development:** React Native (for cross-platform iOS/Android) or native development (Swift for iOS, Kotlin for Android).
*   **Backend Framework:** Node.js (Express), Python (Django/Flask), or Go (Gin/Echo) – based on team expertise.
*   **Database:** PostgreSQL (for relational data) and/or MongoDB (for flexible document storage).
*   **API Gateway:** Nginx, AWS API Gateway, or similar.
*   **Containerization:** Docker.
*   **Cloud Platform:** AWS, Google Cloud Platform, or Azure (for hosting, managed services like databases, object storage, notification services).
*   **Push Notifications:** Firebase Cloud Messaging (FCM) / Apple Push Notification Service (APNS).
*   **Version Control:** Git (e.g., GitHub, GitLab).

## 6. Future Enhancements (Post-MVP)

*   Integration with smart home devices (energy meters).
*   Barcode scanning for food items.
*   Team/Community features, challenges, leaderboards.
*   Donation options to carbon offset projects.
*   Machine learning for more sophisticated recommendations.
*   Integration with mapping services for transportation tracking.
*   Support for multiple languages.

This detailed specification provides a foundation for the development team to begin designing and implementing the Personal Carbon Footprint Tracker application.